https://github.com/etrupja/BookNotes/blob/master/books.json
===================================================
 step1:- install setup nodejs 
 step2:- goto https://cli.angular.io/ open command prompt and type command
 step3:- >npm install -g @angular/cli
 step4:- create new floder
 step5:- goto inside folder change the directory using cd folder_name
 step6:- >ng new myapp
 step7:- change the directory using cd myapp go inside 
 step8:- >ng serve / ng serve --open
 step9:- Navigate to http://localhost:4200/.
 step10:- webPack successfully
============================================
https://v2.angular.io/docs/ts/latest/
https://github.com/angular/angularfire2/tree/master/docs
============================================================
======Installing Bootstrap4 in the Angualr5

npm install bootstrap@4.0.0-alpha.6
"styles": [

         "styles.css",
       
         "../node_modules/bootstrap/dist/css/bootstrap.min.css"

         ],
 
   "scripts": [

        "../node_modules/jquery/dist/jquery.min.js",
                                            "../node_modules/bootstrap/dist/js/bootstrap.min.js"
   ]
<script src="https://npmcdn.com/tether@1.2.4/dist/js/tether.min.js"></script>
===========================================================
======Installing Bootstrap4 in the Angualr5
//npm install  bootstrap@4.0.0-beta.3 --save
npm install bootstrap@4.0.0-beta.2 --save
npm install bootstrap@4.0.0-beta --save
npm install jquery --save
npm install popper.js --save
npm install --save font-awesome
npm install bootwatch --save
npm install bootstrap@4.0.0-beta jquery popper.js --save
===============================Inject Library angualr-cli.json ==
"styles": [
        "styles.css",
        "../node_modules/bootstrap/dist/css/bootstrap.min.css",
        "../node_modules/font-awesome/css/font-awesome.min.css"
      ], 
      "scripts": [
        "../node_modules/jquery/dist/jquery.min.js",
        "../node_modules/popper.js/dist/popper.min.js",
        "../node_modules/bootstrap/dist/js/bootstrap.min.js"
      ],
=================OR=====================================================
 "styles": [
        "styles.css",
        "../node_modules/bootstrap/dist/css/bootstrap.min.css",
        "../node_modules/font-awesome/css/font-awesome.min.css"
      ], 
      "scripts": [
        "../node_modules/jquery/dist/jquery.slim.min.js",
        "../node_modules/popper.js/dist/umd/popper.min.js",
        "../node_modules/bootstrap/dist/js/bootstrap.min.js"
      ],
=============================================================
  npm install materialize-css --save
  npm install jquery --save
=================================
 "styles": [
        "styles.css",
        "../node_modules/materialize-css/dist/css/materialize.min.css"
      ],
      "scripts":[
        "../node_modules/jquery/dist/jquery.min.js",
        "../node_modules/materialize-css/dist/js/materialize.min.js"
      ],
============================================================================
================= Install Bootwatch ========================
"styles": [
        "styles.css",
        "../node_modules/bootswatch/dist/materia/bootstrap.min.css",
        "../node_modules/font-awesome/css/font-awesome.min.css"
      ], 
      "scripts": [
        "../node_modules/jquery/dist/jquery.slim.min.js",
        "../node_modules/popper.js/dist/umd/popper.min.js"
      ],
==========================================================
https://code.jquery.com/jquery-3.2.1.slim.min.js
https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js
https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js
===========================================================
  "styles": [
        "../node_modules/bootstrap/dist/css/bootstrap.css"
      ],
      "scripts": [
        "../node_modules/jquery/dist/jquery.slim.min.js",
        "../node_modules/popper.js/dist/umd/popper.min.js",
        "../node_modules/bootstrap/dist/js/bootstrap.min.js"
      ],
========================Angular7 =======================
 "styles": [
              "src/styles.css",
              "./node_modules/bootstrap/dist/css/bootstrap.min.css"
            ],
            "scripts": [
              "./node_modules/jquery/dist/jquery.slim.min.js",
              "./node_modules/popper.js/dist/umd/popper.min.js",
              "./node_modules/bootstrap/dist/js/bootstrap.min.js"
            ],
====================== cdn Link ============================
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css">
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/js/bootstrap.min.js"></script>
=============================================================
<div class="well">
  
    <div class="lead">
 
       {{customer?.firstName}}
 //Optional Parameter (?) is Very Important Keep it mind
       {{customer.lastName}}//This Line Occour Error Cannot read property 'lastName' of undefined
  
    </div>

</div>
 =========================================================
(1)Component == >ng g component my-new-component // ng g c component_name
(2)Directive == >ng g directive my-new-directive // ng g d directive_name
(3)Pipe      == >ng g pipe my-new-pipe           // ng g p pipe_name
(4)Service   == >ng g service my-new-service     // ng g s service_name
(5)Class     == >ng g class my-new-class         // ng g class class_name
(6)Guard     == >ng g guard my-new-guard         // ng g g guard_name
(7)Class     == >ng g class my-new-class          
(8)Interface == >ng g interface my-new-interface // ng g i interface_name
(9)Enum      == >ng g enum my-new-enum           // ng g e enum_name
(10)Module    == >ng g module my-module          // ng g m module_name
===========================================================
======== Customer CURD Application using Nodejs REST api with Angular5 & Bootstrap4 alpha-v ===================

/* app.module.ts */

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http'
import { AppRoutingModule} from './app-routing.module';

import { AppComponent } from './app.component';
import { HeaderComponent } from './customers/header/header.component';
import { CustomerService } from './customers/shared/customer.service';
import { RoutingComponent} from './app-routing.module';


@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,
    RoutingComponent,
  ],
  imports: [
    BrowserModule, 
    ReactiveFormsModule,
    HttpClientModule,
    AppRoutingModule
  ],
  providers: [CustomerService],
  bootstrap: [AppComponent]
})
export class AppModule { }


 /* app-routing.module.ts */

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { CustomerListComponent } from './customers/customer-list/customer-list.component';
import { CustomerDetailComponent } from './customers/customer-detail/customer-detail.component';
import { CustomerCreateComponent } from './customers/customer-create/customer-create.component';
const routes: Routes = [
       {
        path:'',
        redirectTo:'customers',
        pathMatch:'full'
       },
       {
         path:'customers',
         component:CustomerListComponent
       },
       {
        path:'customers/create',
        component:CustomerCreateComponent
      },
       {
         path:'customer/:_id',
         component:CustomerDetailComponent
       }

];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
export const RoutingComponent = [CustomerListComponent,CustomerDetailComponent, CustomerCreateComponent];


/* app.component.ts */

import { Component,OnInit } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
 
  constructor(){

  }
  ngOnInit(){

  }

}

/* app.component.html */

<!--The content below is only a placeholder and can be replaced.-->

<div class="container">
 
    <app-header></app-header>
  
    <router-outlet></router-outlet>

</div>



/* customer-list.component.ts */

import { Component, OnInit } from '@angular/core';
import { Customer } from '../shared/customer';
import { CustomerService } from '../shared/customer.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-customer-list',
  templateUrl: './customer-list.component.html',
  styleUrls: ['./customer-list.component.css']
})
export class CustomerListComponent implements OnInit {
  
  public customers:Customer[];
  public customerToDelete:Customer;
  constructor(private customerService:CustomerService,private router:Router){ }
  
    ngOnInit(){
       this.customerService.get()
       .subscribe((resCustomer)=>{
            this.customers = resCustomer;
       });
    }
    details(customer:Customer){
       this.router.navigate(['/customer',customer._id]);
    }
    delete(customer:Customer,$event){
     this.customerToDelete = customer;
     $event.stopPropagation();
    }
    deleteAborted($event){
      this.customerToDelete = null;
      $event.stopPropagation();
    }
    deleteConfirmed($event){
      this.customerService.Delete(this.customerToDelete._id)
      .subscribe(customer => {
        this.customerService.get()
        .subscribe((resCustomer) => {
             this.customers = resCustomer;
        });
      })
      $event.stopPropagation();
    }
    createCustomer(){
      this.router.navigate(['/customers/create']);
    }
}

/* customer-list.component.html */

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <hr>
            <h2>Customer
                <div class="float-right">
                        <button type="button" (click)="createCustomer()" class="btn btn-outline-success">
                                <i class="fa fa-plus" aria-hidden="true"></i>
                         </button>
                </div>
            </h2>
            <hr>
        </div>
        <hr>
    </div>
    <div class="row">
        <div class="col-md-12">
            <ul class="list-group">
                <li *ngFor="let customer of customers" (click)="details(customer)" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                    <div class="float-left">
                        <img class="img rounded-circle img-fluid" src="http://via.placeholder.com/48x48">
                        <h5 class="h5">{{customer.firstName}} {{customer.lastName}}</h5>
                    </div>
                    <div class="float-right" *ngIf="!customerToDelete || customerToDelete._id != customer._id ">
                        <button type="button" class="btn btn-outline-warning">
                            <i class="fa fa-pencil" aria-hidden="true"></i>
                        </button>
                        <button type="button" class="btn btn-outline-danger" (click)="delete(customer,$event)">
                            <i class="fa fa-trash-o" aria-hidden="true"></i> 
                        </button>
                    </div>
                    <div class="float-right" *ngIf="customerToDelete && customerToDelete._id == customer._id">
                            <button type="button" class="btn btn-outline-warning" (click)="deleteAborted($event)">
                                <i class="fa fa-pencil" aria-hidden="true"></i> Cancel
                            </button>
                            <button type="button" class="btn btn-outline-info" (click)="deleteConfirmed($event)">
                                <i class="fa fa-trash-o" aria-hidden="true"></i> Sure?
                            </button>
                        </div>
                </li>

            </ul>
        </div>
    </div>
</div>

/* customer-detail.component.ts */

import { Component, OnInit } from '@angular/core';
import { Customer } from '../shared/customer';
import {Router, ActivatedRoute,Params } from '@angular/router';
import { CustomerService } from '../shared/customer.service';
@Component({
  selector: 'app-customer-detail',
  templateUrl: './customer-detail.component.html',
  styleUrls: ['./customer-detail.component.css']
})
export class CustomerDetailComponent implements OnInit {
  customer:Customer;
  confirmDelete:boolean = false;
  public selectedId:any;
  constructor(private router:Router,private route:ActivatedRoute,private customerService:CustomerService) { }

  ngOnInit(){
    this.route.params.subscribe((params:Params)=>{
      let id = params['_id'];
      this.selectedId = id;
     });
  
      this.customerService.getById(this.selectedId)
      .subscribe((customer) =>{
           this.customer = customer;
      });
     

  }

 Delete(){
    this.confirmDelete = true;
 }
  
  DeleteConfirmed(){
    this.customerService.Delete(this.selectedId)
    .subscribe((customer)=> this.router.navigate(['/customers']));

  }
  abortDelete(){
    this.confirmDelete = false;
  }

}

 /* customer-detail.component.html */

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <hr>
            <button type="button" class="btn btn-outline-success" routerLink="/customers" routerLinkActive="active">
                <i class="fa fa-arrow-circle-left" aria-hidden="true"></i>&nbsp;Back</button>
            <hr>
        </div>
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    Customer Details
                </div>
                <div class="card-body row">
                    <div class="col-md-4">
                        <img class="img" src="http://via.placeholder.com/275x275">
                    </div>
                    <div class="col-md-8">
                        <dl class="row space">
                            <dt class="col-md-2">FirstName:</dt>
                            <dd class="col-md-10">{{customer?.firstName}}</dd>
                        </dl>
                        <dl class="row space">
                            <dt class="col-md-2">LastName:</dt>
                            <dd class="col-md-10">{{customer?.lastName}}</dd>
                        </dl>
                        <dl class="row space">
                            <dt class="col-md-2">Address:</dt>
                            <dd class="col-md-10">
                                <ul class="list-unstyled">
                                    <li>Lorem ipsum dolor sit amet</li>
                                    <li>Consectetur adipiscing elit</li>
                                    <li>Integer molestie lorem at massa</li>
                                    <li>Facilisis in pretium nisl aliquet</li>
                                    <li>Nulla volutpat aliquam velit</li>
                                </ul>
                            </dd>
                        </dl>

                    </div>
                </div>
                <div class="card-footer bg-transparent">
                    <div class="pull-right" *ngIf="!confirmDelete">
                        <button class="btn btn-outline-danger" (click)="Delete()">
                            <i class="fa fa-trash-o" aria-hidden="true"></i> Delete
                        </button>
                        <button class="btn btn-outline-warning">
                            <i class="fa fa-pencil" aria-hidden="true"></i> Update
                        </button>  

                    </div>
                    <div class="pull-right" *ngIf="confirmDelete">
                            <button class="btn btn-outline-danger" (click)="DeleteConfirmed()">
                                <i class="fa fa-trash-o" aria-hidden="true"></i> Sure?
                            </button>
                            <button class="btn btn-outline-info" (click)="abortDelete()">
                                    <i class="fa fa-times" aria-hidden="true"></i> Cancel
                            </button>
                        </div>
                </div>
            </div>
        </div>
    </div>
</div>

/* customer-create.component.ts */

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { CustomerService } from '../shared/customer.service';


@Component({
  selector: 'app-customer-create',
  templateUrl: './customer-create.component.html',
  styleUrls: ['./customer-create.component.css']
})
export class CustomerCreateComponent implements OnInit {
  customerForm:FormGroup;
  constructor(
    private router:Router,
    private fb:FormBuilder,
    private customerService:CustomerService
  ) { 
    this.customerForm  = this.fb.group({
      firstName: ['',[Validators.required,Validators.minLength(3)]],
      lastName:  ['',[Validators.required,Validators.minLength(3)]]
  });
  }

  ngOnInit() {
  }
  back(){
   this.router.navigate(['/customers']);
  }
  onSubmit(){
    this.customerService.Create(this.customerForm.value)
    .subscribe(customer => this.router.navigate(['/customers']));
  }
  revert(){
    this.customerForm.reset();
  }
   isInvalid(controlName:string){
     const control =this.customerForm.controls[controlName];
    return control.errors && (control.dirty || control.touched);
  }
  isValid(controlName:string){
    const control =this.customerForm.controls[controlName];
   return !control.errors && (control.dirty || control.touched);
 }
  getControlName(controlName:string) {
     return this.customerForm.controls[controlName];
  }
  
}

/* customer-create.component.html */

<div class="container">
  <div class="row">
    <div class="col-md-12">
      <hr>
      <h4>
        <button type="button" (click)="back()" class="btn btn-outline-success">
          <i class="fa fa-arrow-circle-left" aria-hidden="true"></i>
        </button>
        Create Customer
      </h4>
      <hr>
    </div>
    <div class="col-md-12">
      <form [formGroup]="customerForm" (ngSubmit)="onSubmit()"  novalidate>
        <div class="form-group">
          <label class="center-block">FirstName:
            <input class="form-control form-control-lg" [ngClass]="{'is-invalid':isInvalid('firstName'),'is-valid':isValid('firstName')}" placeholder="Firstname(required)" formControlName="firstName">
              <div *ngIf="isInvalid('firstName')" class="invalid-feedback" >
                  <span *ngIf="getControlName('firstName').errors.required">
                      First Name is Required!!
                  </span>
                  <span *ngIf="getControlName('firstName').errors.minlength">
                    FristName must be at least 3 character long!!
                </span>
              </div>
          </label>
        </div>
        <div class="form-group">
          <label class="center-block">LastName:
            <input class="form-control form-control-lg" [ngClass]="{'is-invalid':isInvalid('lastName'),'is-valid':isValid('lastName')}" placeholder="Lastname(required)" formControlName="lastName">
            <div *ngIf="isInvalid('lastName')" class="invalid-feedback" >
              <span *ngIf="getControlName('lastName').errors.required">
                  Last Name is Required!!
              </span>
              <span *ngIf="getControlName('lastName').errors.minlength">
                LastName must be at least 3 character long!!
            </span>
          </div>
          </label>
        </div>
        <div class="form-group" style="margin-bottom: 1em">
          <button type="submit" [disabled]="customerForm.invalid" class="btn btn-outline-success btn-lg">
              <i class="fa fa-floppy-o" aria-hidden="true"></i> Save
          </button> &nbsp;
          <button type="reset" (click)="revert()" [disabled]="customerForm.invalid" class="btn btn-outline-danger btn-lg">Reset</button>
        </div>
      </form>
      {{customerForm.value | json}} {{customerForm.status | json}}
    </div>
  </div>
</div>


/* customer.ts */ Interface/Class

export class/interface Customer{
    _id?:number;
    firstName:string;
    lastName:string;
}

/* customer.service.ts */


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { Customer } from './customer';
import { environment } from '../../../environments/environment';

const url = environment.apiEndpoint + '/customers';
const url2 = "http://localhost:3000/api/customer/";
@Injectable()
export class CustomerService {

    constructor(private http: HttpClient) { }

    get(): Observable<Customer[]> {
        return this.http.get<Customer[]>(url);
    }
    getById(id: any): Observable<Customer> {
        return this.http.get<Customer>(url + '/' + id);
    }
    Create(customer:Customer[]): Observable<Customer> {
        return this.http.post<Customer>(url2,customer);
    }
   Update(id: number,customer): Observable<Customer> {
        return this.http.put<Customer>(customer,url2 + '/' + id);
    }
    Delete(id): Observable<Customer> {
        return this.http.delete<Customer>(url2 + id);
    }
}

/* environment.ts */

export const environment = {
  production: false,
  apiEndpoint:'http://localhost:3000/api'
};

============= REST api using Nodejs & MongoDB ====================

/*  server.js */


const express = require('express');
const bodyParser = require('body-parser');

const api = require('./server/route/api');

const port = 3000;

const app = express();

app.use(bodyParser.urlencoded({extended:true}));

app.use(bodyParser.json());

app.use('/api',api);

app.get('/',function(req,res){
    res.send('Welcome To Nodejs Application');
})
app.listen(port,function(){
      console.log("Server running on localhost:" + port);
});


 /*  model.js */


 const mongoose = require('mongoose');

 const Schema = mongoose.Schema;

 var CustomerSchema = new Schema({
       firstName:String,
       lastName:String
 })

 module.exports = mongoose.model('customer',CustomerSchema,'customers');

 /* api.js/route.js */



const express = require('express');
 const router = express.Router();
 const mongoose = require('mongoose');
 var Customer = require('../model/customer')//..=>root_folder/root_inside_folder
 //mongoose.Promise = require('bluebird');
 confing = "mongodb://127.0.0.1:27017/shop";
 mongoose.connect(confing,{
    useMongoClient: true
 });
mongoose.Promise = global.Promise;
router.get('/customers',function(req,res){
    console.log('Fetch All Customer Record');
    Customer.find({})
    .exec(function(err,customers){
         if(err){
              res.send('Data Fetching Error');
         }else{
              res.json(customers);
         }
    });
});
router.get('/customers/:id',function(req,res){
    console.log('Fetch Single Customers Record');
    Customer.findById(req.params.id)
    .exec(function(err,customer){
         if(err){
              res.send('Single Data Fetching Error');
         }else{
              res.json(customer);
         }
    });
});

router.post('/customer',function(req,res){
       console.log('Save Record');
      var newCustomer = new Customer();
      newCustomer.firstName = req.body.firstName;
      newCustomer.lastName =  req.body.lastName;
      newCustomer.save(function(err,insertedRecord){
           if(err){
                res.send('Save Record Error');
           }else{
                res.json(insertedRecord);
           }
      });
});
router.put('/customer/:id',function(req,res){
         console.log('Update Record');
         Customer.findByIdAndUpdate(req.params.id,
            {
                $set:{
                     firstName:req.body.firstName,
                     lastName: req.body.lastName
                }
            },
            {
                new:true
            },
            function(err,updatedRecord){
                 if(err){
                      res.send('Update Record Error');
                 }else{
                     res.json(updatedRecord);
                 }
            }

        )
});
router.delete('/customer/:id',function(req,res){
      console.log('Deleted Record');
      Customer.findByIdAndRemove(req.params.id,function(err,deletedRecord){
           if(err){
               res.send('Delete Record Error');
           }else{
               res.json(deletedRecord);
           }
      });
});
module.exports = router;

 /* package.json */

{
  "name": "first_app",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.18.2",
    "cookie-parser": "^1.4.3",
    "ejs": "^2.5.7",
    "express": "^4.15.4",
    "express-session": "^1.15.6",
    "mongoose": "^4.12.1"
  }
}


===========================================================================

/* index.html */

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>CustomerApp</title>
  <base href="/">

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
  <!--<script src="https://npmcdn.com/tether@1.2.4/dist/js/tether.min.js"></script>-->
</body>
</html>

/* package.json */

{
  "name": "customer-app",
  "version": "0.0.0",
  "license": "MIT",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^5.0.0",
    "@angular/common": "^5.0.0",
    "@angular/compiler": "^5.0.0",
    "@angular/core": "^5.0.0",
    "@angular/forms": "^5.0.0",
    "@angular/http": "^5.0.0",
    "@angular/platform-browser": "^5.0.0",
    "@angular/platform-browser-dynamic": "^5.0.0",
    "@angular/router": "^5.0.0",
    "bootstrap": "^4.0.0-alpha.6",
    "core-js": "^2.4.1",
    "font-awesome": "^4.7.0",
    "rxjs": "^5.5.2",
    "zone.js": "^0.8.14"
  },
  "devDependencies": {
    "@angular/cli": "1.5.4",
    "@angular/compiler-cli": "^5.0.0",
    "@angular/language-service": "^5.0.0",
    "@types/jasmine": "~2.5.53",
    "@types/jasminewd2": "~2.0.2",
    "@types/node": "~6.0.60",
    "codelyzer": "^4.0.1",
    "jasmine-core": "~2.6.2",
    "jasmine-spec-reporter": "~4.1.0",
    "karma": "~1.7.0",
    "karma-chrome-launcher": "~2.1.1",
    "karma-cli": "~1.0.1",
    "karma-coverage-istanbul-reporter": "^1.2.1",
    "karma-jasmine": "~1.1.0",
    "karma-jasmine-html-reporter": "^0.2.2",
    "protractor": "~5.1.2",
    "ts-node": "~3.2.0",
    "tslint": "~5.7.0",
    "typescript": "~2.4.2"
  }
}


 /* angular-cli.json */

{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "project": {
    "name": "customer-app"
  },
  "apps": [
    {
      "root": "src",
      "outDir": "dist",
      "assets": [
        "assets",
        "favicon.ico"
      ],
      "index": "index.html",
      "main": "main.ts",
      "polyfills": "polyfills.ts",
      "test": "test.ts",
      "tsconfig": "tsconfig.app.json",
      "testTsconfig": "tsconfig.spec.json",
      "prefix": "app",
      "styles": [
        "styles.css",
        "../node_modules/font-awesome/css/font-awesome.min.css",
        "../node_modules/bootstrap/dist/css/bootstrap.min.css"
        
      ],
      "scripts": [
        "../node_modules/jquery/dist/jquery.min.js",
         "../node_modules/bootstrap/dist/js/tether.min.js",
        "../node_modules/bootstrap/dist/js/bootstrap.min.js"
      ],
      "environmentSource": "environments/environment.ts",
      "environments": {
        "dev": "environments/environment.ts",
        "prod": "environments/environment.prod.ts"
      }
    }
  ],
  "e2e": {
    "protractor": {
      "config": "./protractor.conf.js"
    }
  },
  "lint": [
    {
      "project": "src/tsconfig.app.json",
      "exclude": "**/node_modules/**"
    },
    {
      "project": "src/tsconfig.spec.json",
      "exclude": "**/node_modules/**"
    },
    {
      "project": "e2e/tsconfig.e2e.json",
      "exclude": "**/node_modules/**"
    }
  ],
  "test": {
    "karma": {
      "config": "./karma.conf.js"
    }
  },
  "defaults": {
    "styleExt": "css",
    "component": {}
  }
}
 
=========================================================================================================

======================== Angular5Firebase Application ===================================================

/* app.module.ts */

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AppRoutingModule } from './app-routing.module';
import { AngularFireModule } from 'angularfire2'
import { AngularFireDatabaseModule } from 'angularfire2/database';
import { AppComponent } from './app.component';
import { environment } from '../environments/environment';
import { EmployeesComponent } from './employees/employees.component';
import { EmployeeComponent } from './employees/employee/employee.component';
import { EmployeeListComponent } from './employees/employee-list/employee-list.component';
import { ToastrModule } from 'ngx-toastr';

@NgModule({
  declarations: [
    AppComponent,
    EmployeesComponent,
    EmployeeComponent,
    EmployeeListComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    ToastrModule.forRoot(),
    AppRoutingModule,
    AngularFireModule.initializeApp(environment.firebaseConfig),
    AngularFireDatabaseModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

/* app.component.ts */

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'app';
}

/* app.component.html */

<!--The content below is only a placeholder and can be replaced.-->
<div class="container">
    <app-employees></app-employees>
</div>

<router-outlet></router-outlet>

/* employees.component.ts */

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from './shared/employee.service';

@Component({
  selector: 'app-employees',
  templateUrl: './employees.component.html',
  styleUrls: ['./employees.component.css'],
  providers:[EmployeeService]
})
export class EmployeesComponent implements OnInit {

  constructor(private empService:EmployeeService) { }

  ngOnInit() {
  }

}


/* employees.component.html */


    <div class="text-center">
         <div class="jumbotron">
             <h2 class="h2">Employee Register</h2>
         </div>
    </div>
    <div class="row">
         <div class="col-md-5">
            <app-employee></app-employee>
         </div>
         <div class="col-md-7">
            <app-employee-list></app-employee-list>
        </div>
    </div> 


/* employee.component.ts */

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from '../shared/employee.service';
import { NgForm } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';


@Component({
  selector: 'app-employee',
  templateUrl: './employee.component.html',
  styleUrls: ['./employee.component.css']
})
export class EmployeeComponent implements OnInit {

  constructor(private empService:EmployeeService,private toastr:ToastrService) { }

  ngOnInit() {
    this.empService.getData();
    this.ResetForm();
  }
  onSubmit(employeeForm:NgForm){
    if(employeeForm.value.$key == null)
    this.empService.insertEmployee(employeeForm.value);
    else
   this.empService.updateEmployee(employeeForm.value);
    this.ResetForm(employeeForm);
    this.toastr.success('Submitted Successfully','Employee Register');
  }
  ResetForm(employeeForm?:NgForm){
    if(employeeForm != null)
    employeeForm.reset();
    this.empService.selectedEmployee = {
      $key : null,
      name : '',
      position : '',
      office : '',
      salary : 0
    }
  }
}


/* employee.component.html */

<form #employeeForm="ngForm" (ngSubmit)="onSubmit(employeeForm)" noValidate>
  <input type="hidden" name="$key" #$key="ngModel" [(ngModel)]="empService.selectedEmployee.$key">
  <div class="form-group">
      <label for="name"><b>Name</b></label>
      <input type="text" class="form-control" [(ngModel)]="empService.selectedEmployee.name" name="name" id="name" required placeholder="Full Name" #name="ngModel">
  </div>
  <div class="form-group">
      <label for="position"><b>Position</b></label>
      <input type="text" class="form-control" [(ngModel)]="empService.selectedEmployee.position" name="position" id="position" required placeholder="Position" #position="ngModel">
  </div>
  <div class="form-group">
      <label for="office"><b>Office</b></label>
      <input type="text" class="form-control" [(ngModel)]="empService.selectedEmployee.office" name="office" id="office" required placeholder="Office" #office="ngModel">
  </div>
  <div class="form-group">
      <label for="salary"><b>Salary</b></label>
      <input type="text" class="form-control" [(ngModel)]="empService.selectedEmployee.salary" name="salary" id="salary" required placeholder="Salary" #salary="ngModel">
  </div>
 <div class="form-group">
   <button [disabled]="!employeeForm.valid"  type="submit" class="btn btn-outline-primary"><i class="fa fa-floppy-o"></i> Submit</button>
   <button   type="button" (click)="ResetForm(employeeForm)" class="btn btn-outline-warning"><i class="fa fa-repeat"></i> Reset</button>
 </div>
</form> 


/* employee-list.component.ts */

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from '../shared/employee.service';
import { Employee } from '../shared/employee.model';
import { ToastrService } from 'ngx-toastr';
@Component({
  selector: 'app-employee-list',
  templateUrl: './employee-list.component.html',
  styleUrls: ['./employee-list.component.css']
})
export class EmployeeListComponent implements OnInit {
  employeeList:Employee[];
  constructor(private empService:EmployeeService,private toastr:ToastrService) { }

  ngOnInit() {
    var x = this.empService.getData();
    x.snapshotChanges().subscribe(item => {
      this.employeeList = [];

      item.forEach((element)=>{
          var y = element.payload.toJSON();
          y['$key'] = element.key;
          this.employeeList.push(y as Employee);
      })
    })
  }
  onEdit(emp:Employee){
    this.empService.selectedEmployee = Object.assign({},emp);
  }
  onDelete(key:string){
    if(confirm('Are you sure to delete this record ?') == true){
   this.empService.deleteEmployee(key);
   this.toastr.warning('Deleted Successfully','Employee Register');     
     }
  }
}


/* employee-list.component.html */

<h3 class="text-center">Employee Register</h3>
<table class="table table-striped">
    <thead>
       <tr>
          <th>$Key</th>
          <th>Name</th>
          <th>Position</th>
          <th>Office</th>
          <th>Salary</th>
          <th>Action</th>
       </tr>
    </thead>
    <tbody>
       <tr *ngFor="let employee of employeeList; let i=index">
            <td>{{i}}</td>
            <td>{{employee.name}}</td>
            <td>{{employee.position}}</td>
            <td>{{employee.office}}</td>
            <td>{{employee.salary}}</td>
            <td>
               <button type="button" (click)="onEdit(employee)" class="btn btn-outline-info"><i class="fa fa-pencil-square-o"></i></button>
               <button type="button" (click)="onDelete(employee.$key)" class="btn btn-outline-danger"><i class="fa fa-trash"></i></button>
            </td>
       </tr>
    </tbody>
</table>

/* employee.model.ts */

export class Employee {
    $key:string;
    name:string;
    position:string;
    office:string;
    salary:number;
}

/* employee.service.ts */

import { Injectable } from '@angular/core';
import { Employee } from './employee.model';
import { AngularFireDatabase,AngularFireList } from 'angularfire2/database';
@Injectable()
export class EmployeeService {
 employeeList:AngularFireList<any>;
 selectedEmployee:Employee = new Employee();
  constructor(private firebase:AngularFireDatabase) { }
 
   getData(){
     this.employeeList = this.firebase.list('employees');
     return this.employeeList;
   }
   insertEmployee(employee:Employee){
      this.employeeList.push({
        name:employee.name,
        position:employee.position,
        office:employee.office,
        salary:employee.salary
      });
   }
   updateEmployee(employee:Employee){
     this.employeeList.update(
       employee.$key,
       {
          name:employee.name,
          position:employee.position,
          office:employee.office,
          salary:employee.salary
        }
      )
   }
   deleteEmployee($key:string){
      this.employeeList.remove($key);
   }
}
 
=========================================================================================================
/* package.json */

{
  "name": "firebasecrud",
  "version": "0.0.0",
  "license": "MIT",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular-devkit/core": "0.0.29",
    "@angular/animations": "^5.0.0",
    "@angular/common": "^5.0.0",
    "@angular/compiler": "^5.0.0",
    "@angular/core": "^5.0.0",
    "@angular/forms": "^5.0.0",
    "@angular/http": "^5.0.0",
    "@angular/platform-browser": "^5.0.0",
    "@angular/platform-browser-dynamic": "^5.0.0",
    "@angular/router": "^5.0.0",
    "angularfire2": "^5.0.0-rc.4",
    "bootstrap": "^4.0.0-beta.2",
    "core-js": "^2.4.1",
    "firebase": "^4.9.0",
    "font-awesome": "^4.7.0",
    "jquery": "^3.3.1",
    "ngx-toastr": "^8.1.1",
    "popper.js": "^1.12.9",
    "rxjs": "^5.5.2",
    "zone.js": "^0.8.14"
  },
  "devDependencies": {
    "@angular/cli": "1.5.4",
    "@angular/compiler-cli": "^5.0.0",
    "@angular/language-service": "^5.0.0",
    "@types/jasmine": "~2.5.53",
    "@types/jasminewd2": "~2.0.2",
    "@types/node": "~6.0.60",
    "codelyzer": "^4.0.1",
    "jasmine-core": "~2.6.2",
    "jasmine-spec-reporter": "~4.1.0",
    "karma": "~1.7.0",
    "karma-chrome-launcher": "~2.1.1",
    "karma-cli": "~1.0.1",
    "karma-coverage-istanbul-reporter": "^1.2.1",
    "karma-jasmine": "~1.1.0",
    "karma-jasmine-html-reporter": "^0.2.2",
    "protractor": "~5.1.2",
    "ts-node": "~3.2.0",
    "tslint": "~5.7.0",
    "typescript": "~2.4.2"
  }
}

========================================================================================================
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { Fruit } from './fruit.model';
@Injectable()
export class FruitService {
  constructor(private http: HttpClient) { }

  get(): Observable<Fruit[]> {
      return this.http.get<Fruit[]>('http://localhost/fruit_api/select.php');
  }
//   getById(id: any): Observable<Customer> {
//       return this.http.get<Customer>(url + '/' + id);
//   }
//   Create(customer:Customer[]): Observable<Customer> {
//       return this.http.post<Customer>(url2,customer);
//   }
//  Update(id: number,customer): Observable<Customer> {
//       return this.http.put<Customer>(customer,url2 + '/' + id);
//   }
//   Delete(id): Observable<Customer> {
//       return this.http.delete<Customer>(url2 + id);
//   }
}
===============================================================================================
============= /* app.module.ts */ =============================
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import { AngularFireModule } from 'angularfire2';
import { AngularFireDatabaseModule, FirebaseListObservable} from 'angularfire2/database-deprecated';
//import { AngularFireDatabaseModule } from 'angularfire2/database';
 
import { environment } from '../environments/environment';
import { AppRoutingModule,AppRoutingComponent } from './app-routing.module';

import { AppComponent } from './app.component';

import { EmployeeService } from './employee/shared/employee.service';
import {MatGridListModule} from '@angular/material/grid-list';
import {MatInputModule} from '@angular/material/input';
import {MatToolbarModule} from '@angular/material/toolbar';
import {MatButtonModule} from '@angular/material/button';
import {MatTableModule} from '@angular/material/table';
@NgModule({
  declarations: [
    AppComponent,
    AppRoutingComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    BrowserAnimationsModule,
    AngularFireModule.initializeApp(environment.firebase),
    AngularFireDatabaseModule, // for database
    AppRoutingModule,
    MatGridListModule,
    MatInputModule,
    MatToolbarModule,
    MatButtonModule,
    MatTableModule
  ],
  providers: [EmployeeService],
  bootstrap: [AppComponent]
})
export class AppModule { }

=============/* employee.service.ts */=====================================================
import { Injectable } from '@angular/core';
import { AngularFireDatabase, FirebaseListObservable } from 'angularfire2/database-deprecated'; 
import { Observable } from 'rxjs/Observable';
import { Employee } from './employee.model';
@Injectable()
export class EmployeeService {
  employeeList:FirebaseListObservable<any[]>;
  employeeDetails:Observable<any>;
  constructor(private db: AngularFireDatabase) {
   // this.employeeList = db.list('items').valueChanges();
   }

   getEmployees() {
    this.employeeList = this.db.list('/employees') as FirebaseListObservable<any[]>;
    return this.employeeList;
  }

   getEmployee($key){
       this.employeeDetails = this.db.object('/employees/'+$key);
       return this.employeeDetails;
   }

   addEmployee(employee){
    this.db.list('/employees').push({ 
        name:employee.name,
        email:employee.email,
        designation:employee.designation,
        salary:employee.salary,
        city:employee.city
     });
   }
   updateEmployee(employee:Employee){
    this.db.list('/employees').update(employee.$key,{
        name:employee.name,
        email:employee.email,
        designation:employee.designation,
        salary:employee.salary,
        city:employee.city
      })
   }
   deleteEmployee($key:string){
    this.db.list('/employees').remove($key);
   }
}

==========================================================================================
 